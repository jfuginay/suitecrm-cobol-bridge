name: SuiteCRM COBOL Bridge - Test Automation

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run nightly tests at 2 AM UTC
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18'
  PHP_VERSION: '8.1'
  COBOL_COMPILER: 'cobc'
  REDIS_URL: 'redis://localhost:6379'
  MYSQL_DATABASE: 'suitecrm_test'
  MYSQL_USER: 'test_user'
  MYSQL_PASSWORD: 'test_password'

jobs:
  # Unit Tests for Node.js Components
  unit-tests-nodejs:
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd api-gateway && npm ci
          cd ../business-rules && npm ci
          cd ../cloud-burst && npm ci
          cd ../monitoring && npm ci
          cd ../mobile-api && npm ci
          cd ../debugger && npm ci

      - name: Run API Gateway unit tests
        run: |
          cd api-gateway
          npm run test -- --coverage --testPathPattern="tests/unit"
        env:
          NODE_ENV: test

      - name: Run Cloud Burst unit tests
        run: |
          cd cloud-burst
          npm run test -- --coverage

      - name: Run React component tests
        run: |
          cd business-rules
          npm run test -- --coverage --watchAll=false
          cd ../monitoring
          npm run test -- --coverage --watchAll=false

      - name: Upload Node.js coverage reports
        uses: codecov/codecov-action@v3
        with:
          files: |
            ./api-gateway/coverage/lcov.info
            ./cloud-burst/coverage/lcov.info
            ./business-rules/coverage/lcov.info
            ./monitoring/coverage/lcov.info
          flags: nodejs-unit-tests
          name: nodejs-coverage

  # Unit Tests for PHP Components
  unit-tests-php:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_DATABASE: ${{ env.MYSQL_DATABASE }}
          MYSQL_USER: ${{ env.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ env.MYSQL_PASSWORD }}
          MYSQL_ROOT_PASSWORD: root
        ports:
          - 3306:3306
        options: >-
          --health-cmd "mysqladmin ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, pdo, pdo_mysql, curl, json
          coverage: xdebug

      - name: Install Composer dependencies
        run: |
          cd suitecrm-integration
          composer install --no-progress --no-interaction

      - name: Setup test database
        run: |
          mysql -h 127.0.0.1 -u root -proot -e "CREATE DATABASE IF NOT EXISTS ${MYSQL_DATABASE}_test;"
          mysql -h 127.0.0.1 -u root -proot -e "GRANT ALL PRIVILEGES ON ${MYSQL_DATABASE}_test.* TO '${MYSQL_USER}'@'%';"

      - name: Run PHPUnit tests
        run: |
          cd suitecrm-integration
          vendor/bin/phpunit --coverage-clover coverage.xml
        env:
          DB_HOST: 127.0.0.1
          DB_DATABASE: ${{ env.MYSQL_DATABASE }}_test
          DB_USERNAME: ${{ env.MYSQL_USER }}
          DB_PASSWORD: ${{ env.MYSQL_PASSWORD }}

      - name: Upload PHP coverage reports
        uses: codecov/codecov-action@v3
        with:
          files: ./suitecrm-integration/coverage.xml
          flags: php-unit-tests
          name: php-coverage

  # COBOL Program Validation Tests
  cobol-validation:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install COBOL compiler
        run: |
          sudo apt-get update
          sudo apt-get install -y gnucobol-3 gnucobol-3-doc
          cobc --version

      - name: Install time utility for memory monitoring
        run: |
          sudo apt-get install -y time

      - name: Run COBOL validation tests
        run: |
          cd cobol-core/tests
          node validate-cobol.js
        env:
          COBOL_COMPILER: cobc
          TEST_TIMEOUT: 30000

      - name: Upload COBOL test reports
        uses: actions/upload-artifact@v3
        with:
          name: cobol-validation-report
          path: cobol-core/tests/output/cobol-validation-report.json

  # Integration Tests
  integration-tests:
    runs-on: ubuntu-latest
    needs: [unit-tests-nodejs, unit-tests-php]

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
      
      mysql:
        image: mysql:8.0
        env:
          MYSQL_DATABASE: ${{ env.MYSQL_DATABASE }}
          MYSQL_USER: ${{ env.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ env.MYSQL_PASSWORD }}
          MYSQL_ROOT_PASSWORD: root
        ports:
          - 3306:3306

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, pdo, pdo_mysql, curl, json

      - name: Install COBOL compiler
        run: |
          sudo apt-get update
          sudo apt-get install -y gnucobol-3

      - name: Install dependencies
        run: |
          cd api-gateway && npm ci
          cd ../suitecrm-integration && composer install --no-dev

      - name: Build Docker containers
        run: |
          docker-compose -f docker-compose.test.yml build

      - name: Start test environment
        run: |
          docker-compose -f docker-compose.test.yml up -d
          sleep 30  # Wait for services to be ready

      - name: Install Playwright
        run: |
          npm install -g @playwright/test
          npx playwright install

      - name: Run integration tests
        run: |
          cd tests/integration
          npx playwright test
        env:
          API_BASE_URL: http://localhost:3000/api/v1
          SUITECRM_URL: http://localhost:8080
          WS_URL: ws://localhost:3000

      - name: Upload integration test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: integration-test-results
          path: tests/integration/test-results/

      - name: Stop test environment
        if: always()
        run: |
          docker-compose -f docker-compose.test.yml down -v

  # Security Tests
  security-tests:
    runs-on: ubuntu-latest
    needs: [unit-tests-nodejs]

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          cd api-gateway && npm ci

      - name: Start API Gateway
        run: |
          cd api-gateway
          npm start &
          sleep 10  # Wait for server to start
        env:
          NODE_ENV: test
          PORT: 3000

      - name: Run security tests
        run: |
          cd tests/security
          node security-tests.js
        env:
          API_BASE_URL: http://localhost:3000/api/v1
          WS_URL: ws://localhost:3000

      - name: Upload security test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-test-results
          path: tests/security/results/

  # Performance Tests
  performance-tests:
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install COBOL compiler
        run: |
          sudo apt-get update
          sudo apt-get install -y gnucobol-3

      - name: Install dependencies
        run: |
          cd api-gateway && npm ci
          npm install -g artillery@latest

      - name: Build and start services
        run: |
          docker-compose -f docker-compose.test.yml up -d
          sleep 30

      - name: Run performance tests
        run: |
          cd tests/performance
          artillery run load-test-config.yml --output results.json
          artillery report results.json --output results.html

      - name: Upload performance test results
        uses: actions/upload-artifact@v3
        with:
          name: performance-test-results
          path: tests/performance/results.*

      - name: Performance regression check
        run: |
          cd tests/performance
          node check-performance-regression.js results.json

  # Database Integration Tests
  database-tests:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_DATABASE: ${{ env.MYSQL_DATABASE }}
          MYSQL_USER: ${{ env.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ env.MYSQL_PASSWORD }}
          MYSQL_ROOT_PASSWORD: root
        ports:
          - 3306:3306

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          npm install -g knex-migrator
          cd api-gateway && npm ci

      - name: Run database migrations
        run: |
          cd migrations
          bash migrate.sh
        env:
          DB_HOST: 127.0.0.1
          DB_DATABASE: ${{ env.MYSQL_DATABASE }}
          DB_USERNAME: ${{ env.MYSQL_USER }}
          DB_PASSWORD: ${{ env.MYSQL_PASSWORD }}

      - name: Run database integration tests
        run: |
          cd tests/database
          node database-integration-tests.js
        env:
          DB_HOST: 127.0.0.1
          DB_DATABASE: ${{ env.MYSQL_DATABASE }}
          DB_USERNAME: ${{ env.MYSQL_USER }}
          DB_PASSWORD: ${{ env.MYSQL_PASSWORD }}

  # E2E Tests in multiple browsers
  e2e-tests:
    runs-on: ubuntu-latest
    needs: [integration-tests]
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Playwright
        run: |
          npm install -g @playwright/test
          npx playwright install ${{ matrix.browser }}

      - name: Start test environment
        run: |
          docker-compose -f docker-compose.test.yml up -d
          sleep 45  # Wait for all services

      - name: Run E2E tests
        run: |
          cd tests/e2e
          npx playwright test --project=${{ matrix.browser }}
        env:
          SUITECRM_URL: http://localhost:8080
          API_BASE_URL: http://localhost:3000/api/v1

      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report-${{ matrix.browser }}
          path: tests/e2e/playwright-report/

  # Generate and publish test reports
  test-reports:
    runs-on: ubuntu-latest
    needs: [unit-tests-nodejs, unit-tests-php, cobol-validation, integration-tests, security-tests]
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all test artifacts
        uses: actions/download-artifact@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install report generator dependencies
        run: |
          npm install -g allure-commandline
          npm install junit-report-merger

      - name: Merge test reports
        run: |
          mkdir -p combined-reports
          # Merge JUnit reports if available
          if [ -d "junit-reports" ]; then
            npx junit-report-merger -d junit-reports -o combined-reports/junit-combined.xml
          fi

      - name: Generate comprehensive test report
        run: |
          cd tests/reporting
          node generate-test-report.js

      - name: Upload comprehensive test report
        uses: actions/upload-artifact@v3
        with:
          name: comprehensive-test-report
          path: tests/reporting/output/

      - name: Publish test results to GitHub Pages
        if: github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: tests/reporting/output
          destination_dir: test-reports

  # Notification on test completion
  notify:
    runs-on: ubuntu-latest
    needs: [test-reports, performance-tests, e2e-tests]
    if: always()

    steps:
      - name: Calculate test status
        id: test-status
        run: |
          if [[ "${{ needs.test-reports.result }}" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "message=All tests passed successfully! ✅" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "message=Some tests failed. Please check the results. ❌" >> $GITHUB_OUTPUT
          fi

      - name: Send Slack notification
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ steps.test-status.outputs.status }}
          text: |
            SuiteCRM COBOL Bridge Test Results
            ${{ steps.test-status.outputs.message }}
            
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
            
            View detailed results: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}