name: Continuous Integration

on:
  push:
    branches: [ main, develop, 'feature/**', 'release/**', 'hotfix/**' ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  PHP_VERSION: '8.1'
  COMPOSER_VERSION: '2'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Code Quality and Linting
  code-quality:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ env.PHP_VERSION }}
        extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, mysql, gd
        coverage: xdebug

    - name: Install Node.js dependencies
      run: npm run deps:install

    - name: Install PHP dependencies
      run: |
        cd suitecrm-integration
        composer install --no-progress --prefer-dist

    - name: Run JavaScript linting
      run: npm run lint:js

    - name: Run PHP linting
      run: npm run lint:php

    - name: Check code formatting
      run: |
        npm run format:js -- --check
        npm run format:php -- --dry-run

    - name: Upload lint results
      uses: github/super-linter@v4
      if: always()
      env:
        DEFAULT_BRANCH: main
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        VALIDATE_ALL_CODEBASE: false
        VALIDATE_JAVASCRIPT_ES: true
        VALIDATE_PHP_PHPCS: true
        VALIDATE_DOCKERFILE: true
        VALIDATE_YAML: true
        VALIDATE_JSON: true

  # Security Scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ env.PHP_VERSION }}

    - name: Install dependencies
      run: npm run deps:install

    - name: Run npm audit
      run: npm audit --audit-level=high

    - name: Run Composer security audit
      run: |
        cd suitecrm-integration
        composer audit

    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v3
      with:
        languages: javascript, php

    - name: Autobuild
      uses: github/codeql-action/autobuild@v3

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        component: [api-gateway, business-rules, cloud-burst, monitoring, mobile-api, debugger]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm install
        cd ${{ matrix.component }}
        npm install

    - name: Run unit tests
      run: |
        cd ${{ matrix.component }}
        npm test -- --coverage --coverageReporters=lcov --coverageReporters=text

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./${{ matrix.component }}/coverage/lcov.info
        flags: ${{ matrix.component }}
        name: ${{ matrix.component }}-coverage
        fail_ci_if_error: true

  # PHP Unit Tests
  php-unit-tests:
    name: PHP Unit Tests
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root123
          MYSQL_DATABASE: suitecrm_test
          MYSQL_USER: suitecrm
          MYSQL_PASSWORD: suitecrm123
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ env.PHP_VERSION }}
        extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, mysql, gd
        coverage: xdebug

    - name: Install PHP dependencies
      run: |
        cd suitecrm-integration
        composer install --no-progress --prefer-dist

    - name: Wait for MySQL
      run: |
        while ! mysqladmin ping -h"127.0.0.1" --silent; do
          sleep 1
        done

    - name: Run PHP unit tests
      run: |
        cd suitecrm-integration
        vendor/bin/phpunit --coverage-clover=coverage.xml

    - name: Upload PHP coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./suitecrm-integration/coverage.xml
        flags: php
        name: php-coverage
        fail_ci_if_error: true

  # COBOL Tests
  cobol-tests:
    name: COBOL Program Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install GnuCOBOL
      run: |
        sudo apt-get update
        sudo apt-get install -y gnucobol

    - name: Compile COBOL programs
      run: |
        cd cobol-core
        bash ../scripts/compile-all.sh

    - name: Run COBOL validation tests
      run: |
        cd cobol-core/tests
        npm install
        node validate-cobol.js

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install dependencies
      run: npm run deps:install

    - name: Start test environment
      run: |
        docker-compose -f docker-compose.test.yml up -d
        sleep 60  # Wait for services to be ready

    - name: Wait for services
      run: |
        timeout 300 bash -c 'until curl -f http://localhost:8080/health || curl -f http://localhost:3000/health; do sleep 5; done'

    - name: Install Playwright
      run: |
        cd tests/integration
        npm install
        npx playwright install --with-deps

    - name: Run integration tests
      run: |
        cd tests/integration
        npx playwright test

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: tests/integration/playwright-report/
        retention-days: 30

    - name: Stop test environment
      if: always()
      run: docker-compose -f docker-compose.test.yml down -v

  # Build Docker Images
  build-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests, php-unit-tests, cobol-tests]
    
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-metadata: ${{ steps.meta.outputs.json }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker images
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: Dockerfile.suitecrm
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    # Build additional service images
    - name: Build API Gateway image
      uses: docker/build-push-action@v5
      with:
        context: ./api-gateway
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-api-gateway:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build COBOL Compiler image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: Dockerfile.cobol
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-cobol-compiler:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Quality Gates
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    needs: [unit-tests, php-unit-tests, integration-tests, security-scan]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download coverage reports
      uses: actions/download-artifact@v4
      with:
        path: coverage-reports

    - name: Check code coverage threshold
      run: |
        # This would typically use a tool like nyc or a coverage aggregator
        echo "Checking coverage thresholds..."
        
        # For now, we'll simulate the check
        COVERAGE_THRESHOLD=80
        echo "Coverage threshold: ${COVERAGE_THRESHOLD}%"
        
        # In a real implementation, you would:
        # 1. Parse coverage reports from all components
        # 2. Calculate overall coverage
        # 3. Compare against threshold
        # 4. Fail if below threshold

    - name: Verify security scan results
      run: |
        echo "Verifying no high-severity vulnerabilities found..."
        # This would check the results from security-scan job

    - name: Check test results
      run: |
        echo "Verifying all tests passed..."
        # This ensures all test jobs completed successfully

  # Generate artifacts
  generate-artifacts:
    name: Generate Build Artifacts
    runs-on: ubuntu-latest
    needs: [build-images, quality-gates]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install dependencies
      run: npm run deps:install

    - name: Build all components
      run: npm run build

    - name: Create deployment package
      run: |
        mkdir -p artifacts
        tar -czf artifacts/suitecrm-cobol-bridge-${{ github.sha }}.tar.gz \
          --exclude=node_modules \
          --exclude=.git \
          --exclude=coverage \
          --exclude=test-results \
          .

    - name: Generate build info
      run: |
        cat > artifacts/build-info.json << EOF
        {
          "commit": "${{ github.sha }}",
          "branch": "${{ github.ref_name }}",
          "build_number": "${{ github.run_number }}",
          "build_time": "$(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)",
          "version": "$(cat package.json | jq -r .version)",
          "docker_images": {
            "main": "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}",
            "api_gateway": "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-api-gateway:${{ github.sha }}",
            "cobol_compiler": "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-cobol-compiler:${{ github.sha }}"
          }
        }
        EOF

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts-${{ github.sha }}
        path: artifacts/
        retention-days: 90

  # Deployment readiness check
  deployment-ready:
    name: Deployment Ready
    runs-on: ubuntu-latest
    needs: [quality-gates, build-images, generate-artifacts]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - name: Mark deployment ready
      run: |
        echo "✅ All CI checks passed"
        echo "✅ Code quality verified"
        echo "✅ Security scans completed"
        echo "✅ All tests passed"
        echo "✅ Docker images built and pushed"
        echo "✅ Artifacts generated"
        echo ""
        echo "🚀 Ready for deployment!"
        
        # Create a deployment status
        echo "deployment_ready=true" >> $GITHUB_OUTPUT
    
    outputs:
      deployment_ready: true