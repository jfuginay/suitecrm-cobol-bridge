name: Test Secrets Access

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to test'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production

jobs:
  test-repository-secrets:
    name: Test Repository Secrets
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Test Repository Secrets
        run: |
          echo "================================================"
          echo "Testing Repository-Level Secrets"
          echo "================================================"
          
          # Test Docker credentials
          echo -n "Docker username configured: "
          [[ -n "${{ secrets.DOCKER_USERNAME }}" ]] && echo "‚úì Yes" || echo "‚úó No"
          
          echo -n "Docker password configured: "
          [[ -n "${{ secrets.DOCKER_PASSWORD }}" ]] && echo "‚úì Yes" || echo "‚úó No"
          
          # Test code quality tokens
          echo -n "SonarQube token configured: "
          [[ -n "${{ secrets.SONAR_TOKEN }}" ]] && echo "‚úì Yes" || echo "‚úó No"
          
          echo -n "Codecov token configured: "
          [[ -n "${{ secrets.CODECOV_TOKEN }}" ]] && echo "‚úì Yes" || echo "‚úó No"
          
          echo -n "Snyk token configured: "
          [[ -n "${{ secrets.SNYK_TOKEN }}" ]] && echo "‚úì Yes" || echo "‚úó No"
          
          # Test notification webhooks
          echo -n "Slack webhook configured: "
          [[ -n "${{ secrets.SLACK_WEBHOOK_URL }}" ]] && echo "‚úì Yes" || echo "‚úó No"
          
      - name: Run validation script
        run: |
          chmod +x scripts/validate-secrets.sh
          ./scripts/validate-secrets.sh
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          DOCKER_REGISTRY_URL: ${{ secrets.DOCKER_REGISTRY_URL }}
          GH_PAT: ${{ secrets.GH_PAT }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

  test-environment-secrets:
    name: Test Environment Secrets (${{ inputs.environment }})
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    needs: test-repository-secrets
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Test Environment Secrets
        run: |
          echo "================================================"
          echo "Testing ${{ inputs.environment }} Environment Secrets"
          echo "================================================"
          
          # Test database configuration
          echo "Database Configuration:"
          echo -n "  Host configured: "
          [[ -n "${{ secrets.DATABASE_HOST }}" ]] && echo "‚úì Yes" || echo "‚úó No"
          
          echo -n "  Database name configured: "
          [[ -n "${{ secrets.DATABASE_NAME }}" ]] && echo "‚úì Yes" || echo "‚úó No"
          
          echo -n "  Username configured: "
          [[ -n "${{ secrets.DATABASE_USER }}" ]] && echo "‚úì Yes" || echo "‚úó No"
          
          echo -n "  Password configured: "
          [[ -n "${{ secrets.DATABASE_PASSWORD }}" ]] && echo "‚úì Yes (length: ${#DATABASE_PASSWORD})" || echo "‚úó No"
          
          # Test Redis configuration
          echo -e "\nRedis Configuration:"
          echo -n "  Host configured: "
          [[ -n "${{ secrets.REDIS_HOST }}" ]] && echo "‚úì Yes" || echo "‚úó No"
          
          echo -n "  Password configured: "
          [[ -n "${{ secrets.REDIS_PASSWORD }}" ]] && echo "‚úì Yes" || echo "‚úó No"
          
          # Test application secrets
          echo -e "\nApplication Secrets:"
          echo -n "  JWT secret configured: "
          [[ -n "${{ secrets.JWT_SECRET }}" ]] && echo "‚úì Yes (length: ${#JWT_SECRET})" || echo "‚úó No"
          
          echo -n "  API key configured: "
          [[ -n "${{ secrets.API_KEY }}" ]] && echo "‚úì Yes" || echo "‚úó No"
          
          echo -n "  Encryption key configured: "
          [[ -n "${{ secrets.ENCRYPTION_KEY }}" ]] && echo "‚úì Yes" || echo "‚úó No"
          
          # Test cloud credentials (if production/staging)
          if [[ "${{ inputs.environment }}" != "development" ]]; then
            echo -e "\nCloud Provider Credentials:"
            echo -n "  AWS configured: "
            [[ -n "${{ secrets.AWS_ACCESS_KEY_ID }}" ]] && echo "‚úì Yes" || echo "‚úó No (optional)"
            
            echo -n "  Azure configured: "
            [[ -n "${{ secrets.AZURE_CLIENT_ID }}" ]] && echo "‚úì Yes" || echo "‚úó No (optional)"
            
            echo -n "  GCP configured: "
            [[ -n "${{ secrets.GCP_PROJECT_ID }}" ]] && echo "‚úì Yes" || echo "‚úó No (optional)"
          fi
        env:
          DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
      
      - name: Run validation script with environment
        run: |
          chmod +x scripts/validate-secrets.sh
          ENVIRONMENT=${{ inputs.environment }} ./scripts/validate-secrets.sh
        env:
          ENVIRONMENT: ${{ inputs.environment }}
          # Repository secrets
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          DOCKER_REGISTRY_URL: ${{ secrets.DOCKER_REGISTRY_URL }}
          GH_PAT: ${{ secrets.GH_PAT }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          # Environment secrets
          DATABASE_HOST: ${{ secrets.DATABASE_HOST }}
          DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
          DATABASE_USER: ${{ secrets.DATABASE_USER }}
          DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
          REDIS_HOST: ${{ secrets.REDIS_HOST }}
          REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          API_KEY: ${{ secrets.API_KEY }}
          ENCRYPTION_KEY: ${{ secrets.ENCRYPTION_KEY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}

  test-docker-login:
    name: Test Docker Registry Access
    runs-on: ubuntu-latest
    needs: test-repository-secrets
    steps:
      - name: Test Docker Login
        run: |
          echo "Testing Docker registry login..."
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          echo "‚úì Docker login successful!"
          docker logout

  summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [test-repository-secrets, test-environment-secrets, test-docker-login]
    if: always()
    steps:
      - name: Summary
        run: |
          echo "================================================"
          echo "Secret Configuration Test Summary"
          echo "================================================"
          echo "Environment tested: ${{ inputs.environment }}"
          echo ""
          echo "‚úì Repository secrets test: ${{ needs.test-repository-secrets.result }}"
          echo "‚úì Environment secrets test: ${{ needs.test-environment-secrets.result }}"
          echo "‚úì Docker login test: ${{ needs.test-docker-login.result }}"
          echo ""
          
          if [[ "${{ needs.test-repository-secrets.result }}" == "success" ]] && \
             [[ "${{ needs.test-environment-secrets.result }}" == "success" ]] && \
             [[ "${{ needs.test-docker-login.result }}" == "success" ]]; then
            echo "üéâ All tests passed! Your secrets are properly configured."
          else
            echo "‚ö†Ô∏è  Some tests failed. Please check the logs above."
            exit 1
          fi